<!DOCTYPE html>
<html>
  <head>
    <script src="{{ asset('angular/app/lib/angular/angular.js') }}"></script>
    <script src="{{ asset('angular/app/lib/ng-table/ng-table.js') }}"></script>
    <script src="{{ asset('angular/app/lib/angular-mocks.js') }}"></script>
    <script src="{{ asset('angular/app/lib/angular/angular-resource.js') }}"></script>
    <link data-require="ng-table@*" data-semver="0.3.0" rel="stylesheet" href="{{ asset('angular/app/lib/ng-table/0.3.0/ng-table.css') }}" />
    <link data-require="bootstrap-css@*" data-semver="3.0.0" rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" />
    <style>
        body {
    padding: 10px !important;   
}
.loading-container {
    position: relative;
}
.loading-container .loading:before, .loading-container .loading:after {
    content: " ";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    min-height: 50px;
    min-width: 50px;
}
.loading-container .loading:before {
    background-color: white;
    opacity: 0.5;
}
    </style>
    <script >
        function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
var app = angular.module('DemoMock', ['ngTable', 'ngMockE2E'])
.run(function($httpBackend, $filter, $log, ngTableParams) {
    // emulation of api server
    $httpBackend.whenGET(/data.*/).respond(function(method, url, data, headers) {
        var query = url.split('?')[1],
            requestParams = {};
        $log.log('Ajax request: ', url);
        var vars = query.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            requestParams[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
        }
        // parse url params
        for (var key in requestParams) {
            if (key.indexOf('[') >= 0) {
                var params = key.split(/\[(.*)\]/), value = requestParams[key], lastKey = '';
                angular.forEach(params.reverse(), function(name) {
                    if (name != '') {
                        var v = value;
                        value = {};
                        value[lastKey = name] = isNumber(v) ? parseFloat(v) : v;
                    }
                });
                requestParams[lastKey] = angular.extend(requestParams[lastKey] || {}, value[lastKey]);
            } else {
                requestParams[key] = isNumber(requestParams[key]) ? parseFloat(requestParams[key]) : requestParams[key];
            }
        }
        data = [{name: "Moroni", age: 50},
                {name: "Tiancum", age: 43},
                {name: "Jacob", age: 27},
                {name: "Nephi", age: 29},
                {name: "Enos", age: 34},
                {name: "Tiancum", age: 43},
                {name: "Jacob", age: 27},
                {name: "Nephi", age: 29},
                {name: "Enos", age: 34},
                {name: "Tiancum", age: 43},
                {name: "Jacob", age: 27},
                {name: "Nephi", age: 29},
                {name: "Enos", age: 34},
                {name: "Tiancum", age: 43},
                {name: "Jacob", age: 27},
                {name: "Nephi", age: 29},
                {name: "Enos", age: 34}];
        var params = new ngTableParams(requestParams);
        data = params.filter() ? $filter('filter')(data, params.filter()) : data;
        data = params.sorting() ? $filter('orderBy')(data, params.orderBy()) : data;
        var total = data.length;
        data = data.slice((params.page() - 1) * params.count(), params.page() * params.count());
        return [200, {
            result: data,
            total: total
        }];
    });
    $httpBackend.whenGET(/.*/).passThrough();
});
        
        
    </script>
    <script>
        var app = angular.module('main', ['ngTable', 'ngResource', 'DemoMock'])
        .config(function($interpolateProvider){
            $interpolateProvider.startSymbol('[[').endSymbol(']]');
        })
.controller('DemoCtrl', function($scope, $timeout, $resource, ngTableParams) {
    var Api = $resource('/data');
    
    $scope.tableParams = new ngTableParams({
        page: 1,            // show first page
        count: 10,          // count per page
        sorting: {
            name: 'asc'     // initial sorting
        }
    }, {
        total: 0,           // length of data
        getData: function($defer, params) {
            // ajax request to api
            Api.get(params.url(), function(data) {
                $timeout(function() {
                    // update table params
                    params.total(data.total);
                    // set new data
                    $defer.resolve(data.result);
                }, 500);
            });
        }
    });
});
    </script>
    <script>
        angular.module('main')
.directive('loadingContainer', function () {
    return {
        restrict: 'A',
        scope: false,
        link: function(scope, element, attrs) {
            var loadingLayer = angular.element('<div class="loading"></div>');
            element.append(loadingLayer);
            element.addClass('loading-container');
            scope.$watch(attrs.loadingContainer, function(value) {
                loadingLayer.toggleClass('ng-hide', !value);
            });
        }
    };
});
    </script>
  </head>
  <body ng-app="main" ng-controller="DemoCtrl">
    <button ng-click="tableParams.reload()" class="btn btn-default">Reload</button>
    <button ng-click="tableParams.sorting({})" class="btn btn-default">Clear sorting</button>
    <div class="clearfix"></div>
    <div loading-container="tableParams.settings().$loading">
      <table ng-table="tableParams" show-filter="true" class="table">
        <tbody>
          <tr ng-repeat="user in $data">
            <td data-title="'Name'" filter="{ 'name': 'text' }" sortable="name">
                    [[user.name]]
                    [[$loading]]
                </td>
            <td data-title="'Age'" sortable="age">
                    [[user.age]]
                </td>
          </tr>
        </tbody>
      </table>
        [[ templates.pagination ]]
    </div>
  </body>
</html>